// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G'];
  return dnaBases[Math.floor(Math.random() * 4)];
};

// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = [];
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase());
  }
  return newStrand;
};

//create factory function
const pAequorFactory = (number, array) => {
  return {
    specimenNum: number,
    dna: array,

    //simulate mutation
    mutate() {
      const dnaMutate = Math.floor(math.random() * this.dna.length);
      let mutateBase = returnRandBase();
      while (mutateBase === this.dna[dnaMutate]) {
        mutateBase = returnRandBase();
      }
      this.dna[dnaMutate] = mutateBase;
      return this.dna;
    },

    //compareDNA sequence
    compareDNA(pAequor) {
      let dnaIdentical = 0;
      for (let i = 0; i < this.dna.length; i++) {
        if (this.dna[i] === pAequor.dna[i]) {
          dnaIdentical++;
        }
      }
      const dnaPercent = (dnaIdentical / this.dna.length) * 100;
      console.log (`${this.specimenNum} and ${pAequor.specimenNum} have ${dnaPercent.toFixed(2)}% DNA in common.`)
    },

    //survival chance
    willLikelySurvive() {
      const dnaStrand = this.dna.filter(strand => strand === "C" || strand === "G");
      if ((dnaStrand.length / this.dna.length) > 0.60) {
        return true;
      } else {
        return false;
      }
    },
  };
};

//pAequor specimen surviving in natural environment
const survivingPAequor = [];
let specimenCount = 1;

while (survivingPAequor.length < 30) {
  let newPAequor = pAequorFactory(specimenCount, mockUpStrand());
  if (newPAequor.willLikelySurvive()) {
    survivingPAequor.push(newPAequor);
  }
  specimenCount++;
}

console.log(survivingPAequor);









