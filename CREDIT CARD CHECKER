// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8]
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9]
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6]
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5]
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6]

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5]
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3]
const invalid3 = [3, 7, 5, 7, 9, 6, 0, 8, 4, 4, 5, 9, 9, 1, 4]
const invalid4 = [6, 0, 1, 1, 1, 2, 7, 9, 6, 1, 7, 7, 7, 9, 3, 5]
const invalid5 = [5, 3, 8, 2, 0, 1, 9, 7, 7, 2, 8, 8, 3, 8, 5, 4]

// Can be either valid or invalid
const mystery1 = [3, 4, 4, 8, 0, 1, 9, 6, 8, 3, 0, 5, 4, 1, 4]
const mystery2 = [5, 4, 6, 6, 1, 0, 0, 8, 6, 1, 6, 2, 0, 2, 3, 9]
const mystery3 = [6, 0, 1, 1, 3, 7, 7, 0, 2, 0, 9, 6, 2, 6, 5, 6, 2, 0, 3]
const mystery4 = [4, 9, 2, 9, 8, 7, 7, 1, 6, 9, 2, 1, 7, 0, 9, 3]
const mystery5 = [4, 9, 1, 3, 5, 4, 0, 4, 6, 3, 0, 7, 2, 5, 2, 3]

// An array of all the arrays above
const batch = [valid1, valid2, valid3, valid4, valid5, invalid1, invalid2, invalid3, invalid4, invalid5, mystery1, mystery2, mystery3, mystery4, mystery5]


// Add your functions below:
//luhn algorithm to check card number is valid or not
//step 1
function validateCred(cardArray) {
    let sum = 0;
    let totalSum = 0;
    for (let i = cardArray.length - 1; i >= 0; i--) {
        //step 2
        let checkedArray = cardArray[i];
        if ((cardArray.length - 1 - i) % 2 === 1) {
            checkedArray *= 2;
            if (checkedArray > 9) {
                checkedArray -= 9;
            }
        }
        //step 3
        totalSum += checkedArray;
    }
    //step 4
    if (totalSum % 10 === 0) {
        return true;
    } else {
      return false;
    }
}

console.log(validateCred(valid1));
console.log(validateCred(invalid1));
console.log(validateCred(mystery1));

//create new function to check invalid numbers
function findInvalidCards(cardNumbers) {
    const invalidNumber = [];
    for (let i = 0; i < cardNumbers.length; i++) {
        if (!validateCred(cardNumbers[i])) {
            invalidNumber.push(cardNumbers[i]);
        }
    }
    return invalidNumber;
}

console.log(findInvalidCards([valid1, valid2]));
console.log(findInvalidCards([invalid1, invalid2]));
console.log(findInvalidCards([mystery1, mystery2]));

//create new function to identify card companies that issued faulty card numbers
function idInvalidCardCompanies(invalidCard) {
    const cardCompanies = [];
    for (i = 0; i < invalidCard.length; i++) {
        switch (invalidCard[i][0]) {
            case 3:
                if (cardCompanies.indexOf('Amex') === -1) {
                    cardCompanies.push('Amex');
                }
                break
            
            case 4:
                if (cardCompanies.indexOf('Visa') === -1) {
                    cardCompanies.push('Visa');
                }
                break
            
            case 5:
                if (cardCompanies.indexOf('Mastercard') === -1) {
                    cardCompanies.push('Mastercard');
                }
                break
            
            case 6:
                if (cardCompanies.indexOf('Discover') === -1) {
                    cardCompanies.push('Discover');
                }
                break
            
            default:
                console.log('Company not found');
        }
    }
    return cardCompanies;
}

//test
console.log(idInvalidCardCompanies([invalid1]));
console.log(idInvalidCardCompanies([invalid2]));
console.log(idInvalidCardCompanies([invalid3]));
console.log(idInvalidCardCompanies(batch));
